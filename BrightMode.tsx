import React, { useState, useRef, useEffect } from 'react';
import { Send, Paperclip, Moon, Sun, RotateCcw, Settings, ChevronRight, Folder, File, Plus, Search, Bell } from 'lucide-react';

const PentestAgentUI = () => {
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const fileInputRef = useRef(null);
  const messagesEndRef = useRef(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleSendMessage = () => {
    if (inputMessage.trim()) {
      setMessages([...messages, { text: inputMessage, sender: 'user' }]);
      setInputMessage('');
      setTimeout(() => {
        setMessages(prev => [...prev, { text: "This is a simulated agent response.", sender: 'agent' }]);
      }, 1000);
    }
  };

  const folderStructure = [
    { name: 'Project A', type: 'folder', children: [
      { name: 'Report.pdf', type: 'file' },
      { name: 'Scans', type: 'folder', children: [
        { name: 'Scan1.xml', type: 'file' },
        { name: 'Scan2.xml', type: 'file' },
      ]},
    ]},
    { name: 'Project B', type: 'folder', children: [
      { name: 'Notes.txt', type: 'file' },
    ]},
  ];

  const renderFolder = (item, depth = 0) => (
    <div key={item.name} className={`ml-${depth * 4} py-1`}>
      <div className="flex items-center hover:bg-gray-100 dark:hover:bg-gray-700 rounded px-2 py-1 cursor-pointer">
        {item.type === 'folder' ? <Folder size={16} className="mr-2 text-blue-500" /> : <File size={16} className="mr-2 text-gray-500" />}
        <span className="text-sm">{item.name}</span>
        {item.type === 'folder' && <ChevronRight size={16} className="ml-auto" />}
      </div>
      {item.children && item.children.map(child => renderFolder(child, depth + 1))}
    </div>
  );

  return (
    <div className={`flex flex-col h-screen ${isDarkMode ? 'dark bg-gray-900 text-white' : 'bg-gray-100 text-black'}`}>
      <header className="bg-white dark:bg-gray-800 shadow-md p-4">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <h1 className="text-2xl font-bold dark:text-white">Pentest Agent UI</h1>
          <div className="flex items-center space-x-4">
            <div className="relative">
              <input
                type="text"
                placeholder="Search..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-8 pr-2 py-1 rounded-full border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <Search size={18} className="absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-400" />
            </div>
            <button className="relative p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700">
              <Bell size={20} />
              <span className="absolute top-0 right-0 bg-red-500 rounded-full w-2 h-2"></span>
            </button>
            <button 
              onClick={() => setIsDarkMode(!isDarkMode)} 
              className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700"
            >
              {isDarkMode ? <Sun size={20} /> : <Moon size={20} />}
            </button>
            <div className="relative">
              <button 
                onClick={() => setShowSettings(!showSettings)} 
                className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700"
              >
                <Settings size={20} />
              </button>
              {showSettings && (
                <div className="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-md shadow-lg z-10">
                  <a href="#" className="block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 dark:text-white">Profile</a>
                  <a href="#" className="block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 dark:text-white">Settings</a>
                  <a href="#" className="block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 dark:text-white">Help</a>
                </div>
              )}
            </div>
          </div>
        </div>
      </header>
      
      <main className="flex-1 overflow-hidden">
        <div className="max-w-7xl mx-auto h-full p-4 flex gap-4">
          <div className="flex-1 flex flex-col">
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md flex-1 mb-4 overflow-hidden flex flex-col">
              <h2 className="text-xl font-semibold p-4 border-b dark:border-gray-700 dark:text-white">Chat</h2>
              <div className="flex-1 overflow-y-auto p-4">
                {messages.map((msg, index) => (
                  <div key={index} className={`mb-4 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>
                    <span className={`inline-block p-2 rounded-lg ${
                      msg.sender === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-200 dark:bg-gray-700 dark:text-white'
                    }`}>
                      {msg.text}
                    </span>
                  </div>
                ))}
                <div ref={messagesEndRef} />
              </div>
              <div className="border-t dark:border-gray-700 p-4">
                <div className="flex items-center gap-2">
                  <input
                    type="text"
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                    placeholder="Type your message..."
                    className="flex-1 p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:text-white"
                  />
                  <button 
                    onClick={handleSendMessage} 
                    className="p-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors"
                  >
                    <Send size={20} />
                  </button>
                  <input
                    type="file"
                    ref={fileInputRef}
                    onChange={() => {/* Handle file upload */}}
                    multiple
                    hidden
                  />
                  <button 
                    onClick={() => fileInputRef.current.click()} 
                    className="p-2 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 rounded-md transition-colors dark:text-white"
                  >
                    <Paperclip size={20} />
                  </button>
                </div>
              </div>
            </div>
          </div>
          <div className="w-1/3 flex flex-col gap-4">
            <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md flex-1">
              <h2 className="text-xl font-semibold mb-4 dark:text-white">Summary</h2>
              <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                Recent activity and important findings will be displayed here.
              </p>
              <button className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md flex items-center transition-colors">
                <RotateCcw size={16} className="mr-2" /> Reset
              </button>
            </div>
            <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md flex-1">
              <h2 className="text-xl font-semibold mb-4 flex justify-between items-center dark:text-white">
                Folders
                <button className="text-blue-500 hover:text-blue-600">
                  <Plus size={20} />
                </button>
              </h2>
              <div className="overflow-y-auto max-h-[300px]">
                {folderStructure.map(item => renderFolder(item))}
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default PentestAgentUI;
