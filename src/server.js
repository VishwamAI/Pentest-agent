const express = require('express');
const bodyParser = require('body-parser');
const { exec } = require('child_process');
const cors = require('cors');

const app = express();
const port = 3001;

app.use(bodyParser.json());
app.use(cors({ origin: 'http://localhost:3000' }));

app.post('/summarize', (req, res) => {
    const { text } = req.body;
    if (!text) {
        return res.status(400).json({ error: 'Text is required' });
    }

    const command = `python3 src/summarize.py "${text}"`;

    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`Error: ${error.message}`);
            return res.status(500).json({ error: 'Failed to summarize content' });
        }
        if (stderr) {
            console.error(`Stderr: ${stderr}`);
            return res.status(500).json({ error: 'Failed to summarize content' });
        }

        res.json({ summary: stdout.trim() });
    });
});

app.post('/scan', (req, res) => {
    const { url } = req.body;
    if (!url) {
        return res.status(400).json({ error: 'URL is required' });
    }

    const command = `python3 /home/ubuntu/src/web_vulnerability_scanner.py "${url}" --output /home/ubuntu/src/scan_results.json`;

    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`Error: ${error.message}`);
            return res.status(500).json({ error: 'Failed to scan URL' });
        }
        if (stderr) {
            console.error(`Stderr: ${stderr}`);
            return res.status(500).json({ error: 'Failed to scan URL' });
        }

        res.json({ message: 'Scan initiated', results: stdout.trim() });
    });
});

app.post('/ios_pentest', (req, res) => {
    const { ipaFilePath } = req.body;
    if (!ipaFilePath) {
        return res.status(400).json({ error: 'IPA file path is required' });
    }

    const command = `python3 src/ios_pentest_agent.py "${ipaFilePath}"`;

    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`Error: ${error.message}`);
            return res.status(500).json({ error: 'Failed to perform iOS pentest' });
        }
        if (stderr) {
            console.error(`Stderr: ${stderr}`);
            return res.status(500).json({ error: 'Failed to perform iOS pentest' });
        }

        res.json({ message: 'iOS pentest initiated', results: stdout.trim() });
    });
});

app.post('/cloud_pentest', (req, res) => {
    const { cloudConfig } = req.body;
    if (!cloudConfig) {
        return res.status(400).json({ error: 'Cloud configuration is required' });
    }

    const command = `python3 src/cloud_pentest_agent.py "${cloudConfig}"`;

    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`Error: ${error.message}`);
            return res.status(500).json({ error: 'Failed to perform cloud pentest' });
        }
        if (stderr) {
            console.error(`Stderr: ${stderr}`);
            return res.status(500).json({ error: 'Failed to perform cloud pentest' });
        }

        res.json({ message: 'Cloud pentest initiated', results: stdout.trim() });
    });
});

app.post('/llm_pentest', (req, res) => {
    const { text } = req.body;
    if (!text) {
        return res.status(400).json({ error: 'Text is required' });
    }

    const command = `python3 src/llm_pentest_agent.py "${text}"`;

    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`Error: ${error.message}`);
            return res.status(500).json({ error: 'Failed to perform LLM pentest' });
        }
        if (stderr) {
            console.error(`Stderr: ${stderr}`);
            return res.status(500).json({ error: 'Failed to perform LLM pentest' });
        }

        res.json({ message: 'LLM pentest initiated', results: stdout.trim() });
    });
});

app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
