import requests
from bs4 import BeautifulSoup

class WebPentestAgent:
    def __init__(self, base_url):
        self.base_url = base_url
        self.session = requests.Session()

    def crawl(self):
        """
        Crawl the web application to discover all accessible endpoints.
        """
        endpoints = set()
        to_crawl = [self.base_url]
        crawled = set()

        while to_crawl:
            url = to_crawl.pop()
            if url in crawled:
                continue

            try:
                response = self.session.get(url)
                crawled.add(url)
                soup = BeautifulSoup(response.text, 'html.parser')
                for link in soup.find_all('a', href=True):
                    full_url = requests.compat.urljoin(self.base_url, link['href'])
                    if self.base_url in full_url and full_url not in crawled:
                        to_crawl.append(full_url)
                        endpoints.add(full_url)
            except requests.RequestException as e:
                print(f"Error crawling {url}: {e}")

        return endpoints

    def analyze_security_headers(self, url):
        """
        Analyze HTTP responses for security headers and other common misconfigurations.
        """
        try:
            response = self.session.get(url)
            headers = response.headers
            security_headers = {
                'Content-Security-Policy': headers.get('Content-Security-Policy'),
                'X-Content-Type-Options': headers.get('X-Content-Type-Options'),
                'X-Frame-Options': headers.get('X-Frame-Options'),
                'Strict-Transport-Security': headers.get('Strict-Transport-Security'),
                'X-XSS-Protection': headers.get('X-XSS-Protection')
            }
            return security_headers
        except requests.RequestException as e:
            print(f"Error analyzing security headers for {url}: {e}")
            return None

    def test_sql_injection(self, url):
        """
        Test for SQL injection vulnerabilities.
        """
        payloads = ["' OR '1'='1", "' OR '1'='1' --", "' OR '1'='1' /*"]
        vulnerable = False

        for payload in payloads:
            try:
                response = self.session.get(url, params={'id': payload})
                if "error" in response.text.lower() or "syntax" in response.text.lower():
                    vulnerable = True
                    break
            except requests.RequestException as e:
                print(f"Error testing SQL injection for {url}: {e}")

        return vulnerable

    def test_xss(self, url):
        """
        Test for Cross-Site Scripting (XSS) vulnerabilities.
        """
        payloads = ["<script>alert('XSS')</script>", "<img src=x onerror=alert('XSS')>"]
        vulnerable = False

        for payload in payloads:
            try:
                response = self.session.get(url, params={'q': payload})
                if payload in response.text:
                    vulnerable = True
                    break
            except requests.RequestException as e:
                print(f"Error testing XSS for {url}: {e}")

        return vulnerable

    def test_csrf(self, url):
        """
        Test for Cross-Site Request Forgery (CSRF) vulnerabilities.
        """
        try:
            response = self.session.get(url)
            if "csrf" not in response.text.lower():
                return True
        except requests.RequestException as e:
            print(f"Error testing CSRF for {url}: {e}")

        return False

    def report_findings(self, findings):
        """
        Report findings with severity levels and provide remediation suggestions.
        """
        for finding in findings:
            print(f"URL: {finding['url']}")
            print(f"Vulnerability: {finding['vulnerability']}")
            print(f"Severity: {finding['severity']}")
            print(f"Remediation: {finding['remediation']}")
            print("-" * 40)

# Example usage
if __name__ == "__main__":
    agent = WebPentestAgent("http://example.com")
    endpoints = agent.crawl()
    findings = []

    for endpoint in endpoints:
        security_headers = agent.analyze_security_headers(endpoint)
        if security_headers:
            findings.append({
                'url': endpoint,
                'vulnerability': 'Missing Security Headers',
                'severity': 'Medium',
                'remediation': 'Ensure all security headers are properly set.'
            })

        if agent.test_sql_injection(endpoint):
            findings.append({
                'url': endpoint,
                'vulnerability': 'SQL Injection',
                'severity': 'High',
                'remediation': 'Use parameterized queries and ORM frameworks.'
            })

        if agent.test_xss(endpoint):
            findings.append({
                'url': endpoint,
                'vulnerability': 'Cross-Site Scripting (XSS)',
                'severity': 'High',
                'remediation': 'Implement proper input validation and output encoding.'
            })

        if agent.test_csrf(endpoint):
            findings.append({
                'url': endpoint,
                'vulnerability': 'Cross-Site Request Forgery (CSRF)',
                'severity': 'Medium',
                'remediation': 'Implement CSRF tokens and validate them on the server side.'
            })

    agent.report_findings(findings)
