import csv
import requests
import os

def download_exploitdb_csv(url, save_path):
    response = requests.get(url)
    response.raise_for_status()
    with open(save_path, 'wb') as file:
        file.write(response.content)

def parse_exploitdb_csv(csv_file):
    exploits = []
    with open(csv_file, mode='r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            exploit = {
                'id': row['id'],
                'description': row['description'],
                'platform': row['platform'],
                'type': row['type'],
                'date_published': row['date_published']
            }
            exploits.append(exploit)
    return exploits

def save_exploits_to_csv(exploits, output_file):
    keys = exploits[0].keys()
    with open(output_file, mode='w', newline='', encoding='utf-8') as file:
        writer = csv.DictWriter(file, fieldnames=keys)
        writer.writeheader()
        writer.writerows(exploits)

def collect_pentest_data():
    # Placeholder function to collect data from Pentest-agent's penetration tests
    # This function should interface with the Pentest-agent components to retrieve test results
    pentest_data = [
        {
            'id': '1',
            'description': 'SQL Injection vulnerability found in login form',
            'platform': 'Web',
            'type': 'SQL Injection',
            'date_published': '2024-07-02'
        },
        {
            'id': '2',
            'description': 'Cross-Site Scripting (XSS) vulnerability found in search bar',
            'platform': 'Web',
            'type': 'XSS',
            'date_published': '2024-07-02'
        }
    ]
    return pentest_data

if __name__ == "__main__":
    exploitdb_url = "https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_exploits.csv"
    csv_file_path = "/home/ubuntu/files_exploits.csv"
    output_file_path = "/home/ubuntu/structured_exploits.csv"
    pentest_data_file_path = "/home/ubuntu/pentest_data.csv"

    # Download the latest ExploitDB CSV file
    download_exploitdb_csv(exploitdb_url, csv_file_path)

    # Parse the downloaded CSV file
    exploits = parse_exploitdb_csv(csv_file_path)

    # Collect data from Pentest-agent's penetration tests
    pentest_data = collect_pentest_data()

    # Combine ExploitDB data with Pentest-agent data
    combined_data = exploits + pentest_data

    # Save the combined data to a new CSV file
    save_exploits_to_csv(combined_data, output_file_path)

    print(f"Structured data saved to {output_file_path}")
