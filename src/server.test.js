const request = require('supertest');
const express = require('express');
const bodyParser = require('body-parser');
const { exec } = require('child_process');
const cors = require('cors');

const app = express();
app.use(bodyParser.json());
app.use(cors({ origin: 'http://localhost:3000' }));

app.post('/ios_pentest', (req, res) => {
    const { ipaFilePath } = req.body;
    if (!ipaFilePath) {
        return res.status(400).json({ error: 'IPA file path is required' });
    }

    const command = `python3 src/ios_pentest_agent.py "${ipaFilePath}"`;

    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`Error: ${error.message}`);
            return res.status(500).json({ error: 'Failed to perform iOS pentest' });
        }
        if (stderr) {
            console.error(`Stderr: ${stderr}`);
            return res.status(500).json({ error: 'Failed to perform iOS pentest' });
        }

        res.json({ message: 'iOS pentest initiated', results: stdout.trim() });
    });
});

app.post('/cloud_pentest', (req, res) => {
    const { cloudConfig } = req.body;
    if (!cloudConfig) {
        return res.status(400).json({ error: 'Cloud configuration is required' });
    }

    const command = `python3 src/cloud_pentest_agent.py "${cloudConfig}"`;

    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`Error: ${error.message}`);
            return res.status(500).json({ error: 'Failed to perform cloud pentest' });
        }
        if (stderr) {
            console.error(`Stderr: ${stderr}`);
            return res.status(500).json({ error: 'Failed to perform cloud pentest' });
        }

        res.json({ message: 'Cloud pentest initiated', results: stdout.trim() });
    });
});

app.post('/llm_pentest', (req, res) => {
    const { text } = req.body;
    if (!text) {
        return res.status(400).json({ error: 'Text is required' });
    }

    const command = `python3 src/llm_pentest_agent.py "${text}"`;

    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`Error: ${error.message}`);
            return res.status(500).json({ error: 'Failed to perform LLM pentest' });
        }
        if (stderr) {
            console.error(`Stderr: ${stderr}`);
            return res.status(500).json({ error: 'Failed to perform LLM pentest' });
        }

        res.json({ message: 'LLM pentest initiated', results: stdout.trim() });
    });
});

describe('POST /ios_pentest', () => {
    it('should return 400 if IPA file path is not provided', async () => {
        const res = await request(app)
            .post('/ios_pentest')
            .send({});
        expect(res.statusCode).toEqual(400);
        expect(res.body).toHaveProperty('error', 'IPA file path is required');
    });

    it('should return 500 if an error occurs during iOS pentest', async () => {
        const res = await request(app)
            .post('/ios_pentest')
            .send({ ipaFilePath: 'invalid/path' });
        expect(res.statusCode).toEqual(500);
        expect(res.body).toHaveProperty('error', 'Failed to perform iOS pentest');
    });
});

describe('POST /cloud_pentest', () => {
    it('should return 400 if cloud configuration is not provided', async () => {
        const res = await request(app)
            .post('/cloud_pentest')
            .send({});
        expect(res.statusCode).toEqual(400);
        expect(res.body).toHaveProperty('error', 'Cloud configuration is required');
    });

    it('should return 500 if an error occurs during cloud pentest', async () => {
        const res = await request(app)
            .post('/cloud_pentest')
            .send({ cloudConfig: 'invalid/config' });
        expect(res.statusCode).toEqual(500);
        expect(res.body).toHaveProperty('error', 'Failed to perform cloud pentest');
    });
});

describe('POST /llm_pentest', () => {
    it('should return 400 if text is not provided', async () => {
        const res = await request(app)
            .post('/llm_pentest')
            .send({});
        expect(res.statusCode).toEqual(400);
        expect(res.body).toHaveProperty('error', 'Text is required');
    });

    it('should return 500 if an error occurs during LLM pentest', async () => {
        const res = await request(app)
            .post('/llm_pentest')
            .send({ text: 'invalid text' });
        expect(res.statusCode).toEqual(500);
        expect(res.body).toHaveProperty('error', 'Failed to perform LLM pentest');
    });
});
