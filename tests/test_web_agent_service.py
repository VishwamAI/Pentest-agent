import unittest
from flask import Flask, request, jsonify
from flask.testing import FlaskClient
from web_agent_service import app, validate_url, scan_sql_injection, scan_xss, scan_security_misconfigurations, scan_broken_authentication, scan_session_management, scan_vulnerable_components, scan_nmap, information_gathering, scan_identification_and_authentication_failures, scan_software_and_data_integrity_failures, scan_security_logging_and_monitoring_failures, scan_ssrf, scan_api_vulnerabilities, scan_url

class WebAgentServiceTestCase(unittest.TestCase):
    def setUp(self):
        self.app = app.test_client()
        self.app.testing = True

    def test_validate_url(self):
        valid_url = "http://example.com"
        invalid_url = "invalid-url"
        self.assertTrue(validate_url(valid_url))
        self.assertFalse(validate_url(invalid_url))

    def test_scan_sql_injection(self):
        url = "http://example.com"
        user_agent = "PentestAgent"
        results = scan_sql_injection(url, user_agent)
        self.assertIsInstance(results, list)

    def test_scan_xss(self):
        url = "http://example.com"
        user_agent = "PentestAgent"
        results = scan_xss(url, user_agent)
        self.assertIsInstance(results, list)

    def test_scan_security_misconfigurations(self):
        url = "http://example.com"
        user_agent = "PentestAgent"
        results = scan_security_misconfigurations(url, user_agent)
        self.assertIsInstance(results, list)

    def test_scan_broken_authentication(self):
        url = "http://example.com"
        user_agent = "PentestAgent"
        login_url = "http://example.com/login"
        results = scan_broken_authentication(url, user_agent, login_url)
        self.assertIsInstance(results, list)

    def test_scan_session_management(self):
        url = "http://example.com"
        user_agent = "PentestAgent"
        results = scan_session_management(url, user_agent)
        self.assertIsInstance(results, list)

    def test_scan_vulnerable_components(self):
        url = "http://example.com"
        user_agent = "PentestAgent"
        results = scan_vulnerable_components(url, user_agent)
        self.assertIsInstance(results, list)

    def test_scan_nmap(self):
        url = "http://example.com"
        results = scan_nmap(url)
        self.assertIsInstance(results, list)

    def test_information_gathering(self):
        url = "http://example.com"
        user_agent = "PentestAgent"
        results = information_gathering(url, user_agent)
        self.assertIsInstance(results, list)

    def test_scan_identification_and_authentication_failures(self):
        url = "http://example.com"
        user_agent = "PentestAgent"
        results = scan_identification_and_authentication_failures(url, user_agent)
        self.assertIsInstance(results, list)

    def test_scan_software_and_data_integrity_failures(self):
        url = "http://example.com"
        user_agent = "PentestAgent"
        results = scan_software_and_data_integrity_failures(url, user_agent)
        self.assertIsInstance(results, list)

    def test_scan_security_logging_and_monitoring_failures(self):
        url = "http://example.com"
        user_agent = "PentestAgent"
        results = scan_security_logging_and_monitoring_failures(url, user_agent)
        self.assertIsInstance(results, list)

    def test_scan_ssrf(self):
        url = "http://example.com"
        user_agent = "PentestAgent"
        results = scan_ssrf(url, user_agent)
        self.assertIsInstance(results, list)

    def test_scan_api_vulnerabilities(self):
        url = "http://example.com"
        user_agent = "PentestAgent"
        results = scan_api_vulnerabilities(url, user_agent)
        self.assertIsInstance(results, list)

    def test_web_pentest(self):
        response = self.app.post('/web_pentest', json={
            'target_url': 'http://example.com',
            'user_agent': 'PentestAgent',
            'login_url': 'http://example.com/login'
        })
        self.assertEqual(response.status_code, 200)
        self.assertIsInstance(response.json, list)
        for finding in response.json:
            self.assertIn('type', finding)
            self.assertIn('status', finding)
            self.assertIn('url', finding)

if __name__ == '__main__':
    unittest.main()
